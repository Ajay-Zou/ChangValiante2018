%% Feature extraction - Troubleshooting the classifier

%Preallocate
epileptiformLocation(:, 4:8) = 0;

%% Stage 1: Initial Classifier (duration)
%putativeIIS = epileptiformLocation (epileptiformLocation (:,3)<(minSLEduration*frequency),:); 
%putativeSLE = epileptiformLocation (epileptiformLocation (:,3)>=(minSLEduration*frequency),:); 

indexIIS = (epileptiformLocation (:,3)<(minSLEduration*frequency));
epileptiformLocation (indexIIS,7) = 3;   %3 = IIS; 0 = unclassified.

indexEvents = (epileptiformLocation (:,3)>=(minSLEduration*frequency));
putativeSLE = epileptiformLocation(indexEvents,:); 

%% Stage 2: Feature Extraction (Duration, Spiking Frequency and Intensity)

    if userInput(5) == 1   
        %% Creating powerpoint slide
        isOpen  = exportToPPTX();
        if ~isempty(isOpen),
            % If PowerPoint already started, then close first and then open a new one
            exportToPPTX('close');
        end

        exportToPPTX('new','Dimensions',[12 6], ...
            'Title','Epileptiform Event Detector V4.0', ...
            'Author','Michael Chang', ...
            'Subject','Automatically generated PPTX file', ...
            'Comments','This file has been automatically generated by exportToPPTX');

        exportToPPTX('addslide');
        exportToPPTX('addtext', 'Troubleshooting: Epileptiform Events detected', 'Position',[2 1 8 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 36);
        exportToPPTX('addtext', sprintf('File: %s', FileName), 'Position',[3 3 6 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 20);
        exportToPPTX('addtext', 'By: Michael Chang and Christopher Lucasius', 'Position',[4 4 4 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 20);     

        exportToPPTX('addslide');
        exportToPPTX('addtext', 'Legend', 'Position',[0 0 4 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 24);
        exportToPPTX('addtext', 'Epileptiform spike is average + 6*SD of the baseline', 'Position',[0 1 6 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'Artifacts are average + 100*SD', 'Position',[0 2 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'SLE onset is the first peak in power (minimum 1/3 of the max amplitude spike)', 'Position',[0 3 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'SLE offset is when power returns below baseline/2', 'Position',[0 4 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'Note: The event have only been shifted alone the y-axis to start at position 0', 'Position',[0 5 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 16);      
    end
    

for i = 1:size(putativeSLE,1)   
    %make SLE vector
    onsetTime = putativeSLE(i,1);
    offsetTime = putativeSLE(i,2);
    eventIndex = (onsetTime:offsetTime);  %SLE Vector  
        
    %Calculate the spiking rate for epileptiform events
    windowSize = 1;  %seconds      
    sleDuration = round(numel(eventIndex)/frequency);    %rounded to whole number
    clear spikeRateMinute
    for j = 1:sleDuration
        startWindow = onsetTime+((windowSize*frequency)*(j-1));
        EndWindow = onsetTime+((windowSize*frequency)*j);
        spikeRate = and(startWindow<=locs_spike_2nd, EndWindow >=locs_spike_2nd);
        spikeRateMinute(j,1) = startWindow; %time windows starts
        spikeRateMinute(j,2) = sum(spikeRate(:));   %number of spikes in the window
    end
    
    spikeFrequency{i} = spikeRateMinute;    %store the spike frequency of each SLE for plotting later
    
    %average spike rate of SLE
    putativeSLE (i,4) = mean(spikeRateMinute(:,2));
          
    %average intensity of SLE
    totalPower = sum(powerFeature(eventIndex));
    putativeSLE (i,5) = totalPower /sleDuration;    
    
    %peak-to-peak amplitude
    eventVectorLFP = LFP_normalized(eventIndex);
    p2pAmplitude = max(eventVectorLFP) - min (eventVectorLFP);
    putativeSLE (i,6) = p2pAmplitude;
                
    %% Optional: plot vectors for Troubleshooting            
    if userInput(5) == 1   
        
        %set variables
        data1 = LFP_normalized; %Time series to be plotted 
        lightpulse = LED > 1;

        %make background vector
        if (onsetTime >= 50001 && (offsetTime+50000)<numel(data1))
            backgroundVector = (onsetTime-50000:offsetTime+50000);   %Background Vector
        elseif (onsetTime < 50001)
            backgroundVector = (1:offsetTime+50000);
        elseif ((offsetTime+50000)>numel(data1))
            backgroundVector = (onsetTime-50000:numel(data1));
        end
    
        %Plot figures
        figHandle = figure;
        set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
        set(gcf,'Name', sprintf ('Putative SLE #%d', i)); %select the name you want
        set(gcf, 'Position', get(0, 'Screensize'));   

        plot (t(backgroundVector),data1(backgroundVector))
        hold on
        plot (t(eventIndex),data1(eventIndex))     %SLE
        plot (t(onsetTime), data1(onsetTime), 'o', 'MarkerSize', 12, 'MarkerFaceColor', 'red') %onset marker
        plot (t(offsetTime), data1(offsetTime), 'o', 'MarkerSize', 12, 'MarkerFaceColor', 'red') %offset marker
        indexSpikes = and(onsetTime<locs_spike_2nd, offsetTime>locs_spike_2nd); %Locate spikes between the onset and offset  
        plot (t(locs_spike_2nd(indexSpikes)), (data1(locs_spike_2nd(indexSpikes))), 'x') %plot spikes (artifact removed)
        plot (t(backgroundVector),(lightpulse(backgroundVector)-1)/5, 'b') %plot LED   
        title (sprintf('LFP Recording, SLE #%d | For Troubleshooting', i));
        ylabel ('mV');
        xlabel ('Time (sec)');   

        yyaxis right

        plot (spikeRateMinute(:,1)/frequency, spikeRateMinute(:,2), 'o', 'color', 'b')
        ylabel ('spike rate/second (Hz)');
        set(gca,'fontsize',20)

        exportToPPTX('addslide'); %Draw seizure figure on new powerpoint slide
        exportToPPTX('addpicture',figHandle);      
        close(figHandle)
    end        
end

    if userInput(5) == 1   
    % save and close the .PPTX
    newFile = exportToPPTX('saveandclose',sprintf('%s%s', excelFileName, uniqueTitle)); 
    end
    
%% Stage 3: Final Classifier (k-means clustering)

%% Remove artifacts based on average amplitude
%set variable for plotting
[indexAmplitude, thresholdAmplitude] = sleClassifier (putativeSLE(:,6))   
featureSet = putativeSLE(:,6);
index = indexAmplitude;
featureThreshold = thresholdAmplitude;
michaelArtifactThreshold = mean(featureSet)+(3*std(featureSet));

%Determine if artifact is present using Michael's Threshold
indexArtifact = featureSet > michaelArtifactThreshold; 

%Plot any artifacts that are detected
if featureSet (indexArtifact)
    if userInput(6) == 1  
    %plot figure
    featureSet = putativeSLE(:,6);
    index = indexAmplitude;
    featureThreshold = thresholdAmplitude;
    figure;
    set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
    set(gcf,'Name', 'Secondary Artifact Removal, using Peak-to-Peak Amplitude (mV)'); %select the name you want
    gscatter(featureSet , featureSet, index);    %plot scatter plot
    hold on
    %plot the algorithm detected threshold
    plot ([featureThreshold featureThreshold], ylim); 
    %plot Michael Chang's threshold values 
    michaelArtifactThreshold = mean(featureSet)+(3*std(featureSet));
    plot ([michaelArtifactThreshold michaelArtifactThreshold], ylim);
    %Label
    title ('Unsupervised classication, using k-means clustering');
    ylabel ('Peak-to-Peak Amplitude (mV)');
    xlabel ('Peak-to-Peak Amplitude (mV)');   
    legend('Epileptiform Events', 'Artifact', 'Algo Threshold', 'Michaels Threshold')
    set(gca,'fontsize',12)
    end
end

%Remove artifact, based on Michael's threshold 
if featureSet (indexArtifact)
putativeSLE (indexArtifact, :) = [];
end

%% perform k-means clustering on the three feature sets
%classify based on average frequency 
[indexFrequency, thresholdFrequency] = sleClassifier (putativeSLE(:,4))   
putativeSLE (:,9) = indexFrequency;
    if userInput(6) == 1  
    %plot figure
    featureSet = putativeSLE(:,4);
    index = indexFrequency;
    featureThreshold = thresholdFrequency;
    michaelFrequencyThreshold = 1 %Hz 
    figure;
    set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
    set(gcf,'Name', 'Feature Set: Spiking Rate (Hz)'); %select the name you want
    gscatter(featureSet , featureSet, index);    %plot scatter plot
    hold on
    %plot the algorithm detected threshold
    plot ([featureThreshold featureThreshold], ylim); 
    %plot Michael Chang's threshold values 
    plot ([michaelFrequencyThreshold michaelFrequencyThreshold], ylim);
    %Label
    title ('Unsupervised classication, using k-means clustering');
    ylabel ('Spiking Rate (Hz)');
    xlabel ('Spiking Rate (Hz)');   
    legend('IIE', 'SLE', 'Algo Threshold', 'Michaels Threshold')
    set(gca,'fontsize',12)
    end


%classify based on average intensity 
[indexIntensity, thresholdIntensity] = sleClassifier (putativeSLE(:,5))
featureSet = putativeSLE(:,5);
thresholdIntensity = mean(featureSet)-std(featureSet);
indexIntensity = featureSet>thresholdIntensity 
%putativeSLE (:,10) = indexIntensity;

    if userInput(6) == 1  
    %plot figure
    featureSet = putativeSLE(:,5);
    index = indexIntensity;
    featureThreshold = thresholdIntensity;
    figure;
    set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
    set(gcf,'Name', 'Feature Set: Intensity (Power/Duration)'); %select the name you want
    gscatter(featureSet , featureSet, index);    %plot scatter plot
    hold on
    %plot the algorithm detected threshold
    plot ([featureThreshold featureThreshold], ylim); 
    %plot Michael Chang's threshold values 
    if mean(featureSet)>std(featureSet)
        michaelIntensityThreshold = mean(featureSet)-std(featureSet);
    else 
        michaelIntensityThreshold = mean(featureSet);
    end
    plot ([michaelIntensityThreshold michaelIntensityThreshold], ylim);
    %Label
    title ('Unsupervised classication, using k-means clustering');
    ylabel ('Average Intensity (Power/Duration)');
    xlabel ('Average Intensity (Power/Duration)');   
    legend('IIE', 'SLE', 'Algo Threshold', 'Michaels Threshold')
    set(gca,'fontsize',12)
    end

%classify based on average amplitude
for i = 1:15
[indexAmplitude, thresholdAmplitude] = sleClassifier (putativeSLE(:,6));
thresholdAmplitudeStorage(i) = thresholdAmplitude;
end
thresholdAmplitude=min(thresholdAmplitudeStorage);  %deteremined by Algo

featureSet = putativeSLE(:,6);  
sigmaAmplitude = std(featureSet)
algoMinusSigma = thresholdAmplitude-sigmaAmplitude;
michaelAmplitudeThreshold = 1;   %set threshold
indexAmplitude = featureSet>michaelAmplitudeThreshold; 
putativeSLE(:,11) = indexAmplitude;

    if userInput(6) == 1  
    %plot figure
    featureSet = putativeSLE(:,6);
    index = indexAmplitude;
    featureThreshold = thresholdAmplitude;
    figure;
    set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
    set(gcf,'Name', 'Feature set: Peak-to-Peak Amplitude (mV)'); %select the name you want
    gscatter(featureSet , featureSet, index);    %plot scatter plot
    hold on
    %plot the algorithm detected threshold
    plot ([featureThreshold featureThreshold], ylim); 
    %plot Michael Chang's threshold values 
    michaelArtifactThreshold = mean(featureSet)+(3*std(featureSet));
    plot ([michaelAmplitudeThreshold michaelAmplitudeThreshold], ylim);
    plot ([michaelArtifactThreshold michaelArtifactThreshold], ylim);
    %Label
    title ('Unsupervised classication, using k-means clustering');
    ylabel ('Peak-to-Peak Amplitude (mV)');
    xlabel ('Peak-to-Peak Amplitude (mV)');   
    legend('Epileptiform Events', 'Artifact', 'Algo Threshold', 'Michaels Threshold', 'Michaels Artifact Threshold')
    set(gca,'fontsize',12)
    end

%Classifier 
for i = 1: numel(putativeSLE(:,1))
    if indexFrequency(i) + indexIntensity(i) +  indexAmplitude(i) == 3
    putativeSLE (i,7) = 1   %1 = SLE; 2 = IIE; 3 = IIS; 0 = unclassified.
    else
    putativeSLE (i,7) = 2
    end
end

indexSLE = putativeSLE (:,7) == 1;  %classify which ones are SLEs


% %Trouble shooting, temporary array variables 
% SLE_final = putativeSLE((putativeSLE (:,7) == 1),:);
% indexSLE = putativeSLE (:,7) == 1;
% SLE_final(:,1:3)=SLE_final(:,1:3)/frequency;
% IIS = epileptiformLocation (indexIIS,:);

    if userInput(6) == 1  
    %3D scatter plot
    figure;
    scatter3(putativeSLE(:,4), putativeSLE(:,5), putativeSLE(:,6), 18, 'red', 'filled')
    hold on
    scatter3(putativeSLE(indexSLE ,4), putativeSLE(indexSLE ,5), putativeSLE(indexSLE ,6), 18, 'blue', 'filled')
    %Label
    title ('Classified Epileptiform Events');
    xlabel ('Average Spiking Rate (Hz)');   
    ylabel ('Average Intensity (Power/Duration)');
    zlabel ('Peak-to-Peak Amplitude (mV)');    
    legend ('IIE', 'SLE')
    end
