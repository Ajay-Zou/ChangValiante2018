function [ ] = epileptiformClassifier(epileptiformEventLocation, artifactsLocation, EpileptiformSpikeLocation, minSLEduration)
%epileptiformClassifier sorts detected epileptiform events into
%seizure-like events (SLEs, aka ictal events), interictal events (IIEs), 
%interictal spikes (IISs), or artifacts.
%   This function is very good because it was written by Michael

%to detect the location where events occur
%(i.e., epileptiform events, ictal events, interictal spikes, etc.)
%   This function will take the time series (i.e., LFP) to analyze for
%   major events. It will report the onset and offset of these events based
%   on the default criteria that spikes are 20x 1st quartile in the time
%   series and each spike is seperated by 1 second, unless otherwise
%   specified.

%% Default values, if frequency and minPeakDistance is not specified 
if nargin<2
    frequency = 10000;   %10kHz sampling frequency
    minSLEduration = 1;  %seconds
end

%convert variables into Michael's terms used when writing "detection.m"
locs_spike_2nd = EpileptiformSpikeLocation;
epileptiformLocation = epileptiformEventLocation;

%Preallocate
epileptiformLocation(:, 4:8) = 0;

%% Stage 1: Initial Classifier (duration)
%putativeIIS = epileptiformLocation (epileptiformLocation (:,3)<(minSLEduration*frequency),:); 
%putativeSLE = epileptiformLocation (epileptiformLocation (:,3)>=(minSLEduration*frequency),:); 

indexIIS = (epileptiformLocation (:,3)<(minSLEduration*frequency))
epileptiformLocation (indexIIS,7) = 3   %3 = IIS; 0 = unclassified.

indexEvents = (epileptiformLocation (:,3)>=(minSLEduration*frequency));
putativeSLE = epileptiformLocation(indexEvents,:); 

%% Stage 2: Feature Extraction (Duration, Spiking Frequency and Intensity)

    if userInput(4) == 1   
        %% Creating powerpoint slide
        isOpen  = exportToPPTX();
        if ~isempty(isOpen),
            % If PowerPoint already started, then close first and then open a new one
            exportToPPTX('close');
        end

        exportToPPTX('new','Dimensions',[12 6], ...
            'Title','Epileptiform Event Detector V4.0', ...
            'Author','Michael Chang', ...
            'Subject','Automatically generated PPTX file', ...
            'Comments','This file has been automatically generated by exportToPPTX');

        exportToPPTX('addslide');
        exportToPPTX('addtext', 'Troubleshooting: Epileptiform Events detected', 'Position',[2 1 8 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 36);
        exportToPPTX('addtext', sprintf('File: %s', FileName), 'Position',[3 3 6 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 20);
        exportToPPTX('addtext', 'By: Michael Chang and Christopher Lucasius', 'Position',[4 4 4 2],...
                     'Horiz','center', 'Vert','middle', 'FontSize', 20);     

        exportToPPTX('addslide');
        exportToPPTX('addtext', 'Legend', 'Position',[0 0 4 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 24);
        exportToPPTX('addtext', 'Epileptiform spike is average + 6*SD of the baseline', 'Position',[0 1 6 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'Artifacts are average + 100*SD', 'Position',[0 2 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'SLE onset is the first peak in power (minimum 1/3 of the max amplitude spike)', 'Position',[0 3 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'SLE offset is when power returns below baseline/2', 'Position',[0 4 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 14);
        exportToPPTX('addtext', 'Note: The event have only been shifted alone the y-axis to start at position 0', 'Position',[0 5 5 1],...
                     'Horiz','left', 'Vert','middle', 'FontSize', 16);      
    end
    

for i = 1:size(putativeSLE,1)   
    %make SLE vector
    onsetTime = putativeSLE(i,1);
    offsetTime = putativeSLE(i,2);
    eventIndex = (onsetTime:offsetTime);  %SLE Vector  
        
    %Calculate the spiking rate for epileptiform events
    windowSize = 1;  %seconds      
    sleDuration = round(numel(eventIndex)/frequency);    %rounded to whole number
    clear spikeRateMinute
    for j = 1:sleDuration
        startWindow = onsetTime+((windowSize*frequency)*(j-1));
        EndWindow = onsetTime+((windowSize*frequency)*j);
        spikeRate = and(startWindow<=locs_spike_2nd, EndWindow >=locs_spike_2nd);
        spikeRateMinute(j,1) = startWindow; %time windows starts
        spikeRateMinute(j,2) = sum(spikeRate(:));   %number of spikes in the window
    end
    
    spikeFrequency{i} = spikeRateMinute;    %store the spike frequency of each SLE for plotting later
    
    %average spike rate of SLE
    putativeSLE (i,4) = mean(spikeRateMinute(:,2));
          
    %average intensity of SLE
    totalPower = sum(powerFeature(eventIndex));
    putativeSLE (i,5) = totalPower /sleDuration;    
    
    %peak-to-peak amplitude
    eventVectorLFP = LFP_normalized(eventIndex);
    p2pAmplitude = max(eventVectorLFP) - min (eventVectorLFP);
    putativeSLE (i,6) = p2pAmplitude;
                
    %% Optional: plot vectors for Troubleshooting            
    if userInput(4) == 1   
        
        %set variables
        data1 = LFP_normalized; %Time series to be plotted 
        lightpulse = LED > 1;

        %make background vector
        if onsetTime >= 50001
            backgroundVector = (onsetTime-50000:offsetTime+50000);   %Background Vector
        else
            backgroundVector = (1:offsetTime+50000);
        end
            background_vector{i} = backgroundVector;  %store background vector

        %Plot figures
        figHandle = figure;
        set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
        set(gcf,'Name', sprintf ('Putative SLE #%d', i)); %select the name you want
        set(gcf, 'Position', get(0, 'Screensize'));   

        plot (t(backgroundVector),data1(backgroundVector))
        hold on
        plot (t(eventIndex),data1(eventIndex))     %SLE
        plot (t(onsetTime), data1(onsetTime), 'o', 'MarkerSize', 12, 'MarkerFaceColor', 'red') %onset marker
        plot (t(offsetTime), data1(offsetTime), 'o', 'MarkerSize', 12, 'MarkerFaceColor', 'red') %offset marker
        indexSpikes = and(onsetTime<locs_spike_2nd, offsetTime>locs_spike_2nd); %Locate spikes between the onset and offset  
        plot (t(locs_spike_2nd(indexSpikes)), (data1(locs_spike_2nd(indexSpikes))), 'x') %plot spikes (artifact removed)
        plot (t(backgroundVector),(lightpulse(backgroundVector)-1)/5, 'b') %plot LED   
        title (sprintf('LFP Recording, SLE #%d | For Troubleshooting', i));
        ylabel ('mV');
        xlabel ('Time (sec)');   

        yyaxis right

        plot (spikeRateMinute(:,1)/frequency, spikeRateMinute(:,2), 'o', 'color', 'b')
        ylabel ('spike rate/second (Hz)');
        set(gca,'fontsize',20)

        exportToPPTX('addslide'); %Draw seizure figure on new powerpoint slide
        exportToPPTX('addpicture',figHandle);      
        close(figHandle)
    end        
end

    if userInput(4) == 1   
    % save and close the .PPTX
    newFile = exportToPPTX('saveandclose',sprintf('Troubleshooting Epileptiform Events, %s', excelFileName)); 
    end    
        
%% Stage 3: Classifier - High Precision
%Rule #1: average frequency > 1 Hz
index1 = putativeSLE(:,4)>1;

%Rule #2: intensity > (average - sigma)
averageIntensity = mean(putativeSLE(:,5));calc
sigmaIntensity = std(putativeSLE(:,5));
if averageIntensity > sigmaIntensity 
    thresholdIntensity = averageIntensity - sigmaIntensity; 
else
    thresholdIntensity = averageIntensity; 
end
index2 = putativeSLE(:,5)>thresholdIntensity;

%Rule #3: duration > sigma of durations
sigmaDuration = std(putativeSLE(:,3));
index3 = putativeSLE(:,3)>sigmaDuration; 

%Collect all the SLEs 
SLE = putativeSLE((index1 & index2 & index3), :);   %classified SLEs

%Sort remaining events as interictal events (IIEs)
indexIIE = ~ismember(putativeSLE, SLE);
IIE = putativeSLE(indexIIE(:,1),:); %analyze in future versions


%% finding event time (s)
% epileptiformTime = [epileptiformLocation/frequency];

% %% Initial Classifier (rough)
% putativeSLE = epileptiformTime(epileptiformTime(:,3)>=minSLEduration,:); 
% IIS = epileptiformTime(epileptiformTime(:,3)<minSLEduration,:); 

end
