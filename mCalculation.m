%% m-Calculation | By Wilting and Priesemann, 2018
% This script helps you calculate all the m values associated with vectors of interest
% this program integrates with python, read michael's explanation of the
% detection algorithm, furthermore, make sure to add you pathon working
% folder (that contains the python script and matlab script) to MatLab's
% path. Authors: Liam Long and Michael Chang

%Set Variables
k_max = 10000;  %same as window size in my calculations (most accurate possible reading, it's actually unnecessary and make the code slower, but whatever, c'eat la vie; if you want it faster, just use a k_max about 10% of the window size)
contextDuration = 20;  %second | baseline duration for analysis

% Creating powerpoint slide
isOpen  = exportToPPTX();
if ~isempty(isOpen)
    % If PowerPoint already started, then close first and then open a new one
    exportToPPTX('close');
end
exportToPPTX('new','Dimensions',[12 6], ...
    'Title','Epileptiform Event Detector V4.0', ...
    'Author','Michael Chang', ...
    'Subject','Automatically generated PPTX file', ...
    'Comments','This file has been automatically generated by exportToPPTX');
%Add New Slide
exportToPPTX('addslide');
exportToPPTX('addtext', 'M Calculation (Branch Ratio) for Epileptiform Events detected', 'Position',[2 1 8 2],...
             'Horiz','center', 'Vert','middle', 'FontSize', 36);
exportToPPTX('addtext', sprintf('File: %s', FileName), 'Position',[3 3 6 2],...
             'Horiz','center', 'Vert','middle', 'FontSize', 20);
exportToPPTX('addtext', 'By: Michael Chang', 'Position',[4 4 4 2],...
             'Horiz','center', 'Vert','middle', 'FontSize', 20);
%Add New Slide
exportToPPTX('addslide');
exportToPPTX('addtext', 'Legend', 'Position',[0 0 4 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 24);
text = 'Authors: Liam Long and Michael Chang';
exportToPPTX('addtext', sprintf('%s',text), 'Position',[0 1 6 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 14);
text = 'Calculations performed by python script written by Wilting and Priesemann, 2018';
exportToPPTX('addtext', sprintf('%s',text), 'Position',[0 2 5 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 14);
text = sprintf('Duration of background for context: %d seconds', contextDuration);
exportToPPTX('addtext', sprintf('%s',text), 'Position',[0 3 5 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 14);
text = sprintf('The window size for m calculation: %.2f seconds (@10 kHz)', (k_max+200)/frequency);
exportToPPTX('addtext', sprintf('%s',text), 'Position',[0 4 5 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 14);
text = sprintf('k_max: %.0f points', k_max);
exportToPPTX('addtext', sprintf('%s',text), 'Position',[0 5 5 1],...
             'Horiz','left', 'Vert','middle', 'FontSize', 16);

 %Analyse the data (m-calculations)
for i = 1:size(events(:,1),1)
%Find indices of events
[indicesEvent,indicesBackground] = eventIndices(LFP_filtered, events(i,:), contextDuration, frequency);   %Accounts for padding the ends
eventVector = LFP_filtered(indicesEvent);
backgroundVector = LFP_filtered(indicesBackground);
% timeVector = t(indicesBackground);

%Size of background vector 
backgroundLength = floor(length(backgroundVector)/k_max);

%Preallocate Memory for Cell Array
m = cell(1,backgroundLength);
M = zeros(backgroundLength,3);
skip = 0;   %this is preseting a variable, it's important for later on, because if a window "j" is skipped, it will remove that index from analysis
%Calculate m for each window along the length of the event
for j = 0:backgroundLength-1    %Start at zero, so you start at the very beginning of the time series, then each iteration slides down by k_max (the window size) | I use the maximum k-max for the window size, so I should have the most accurate reading of the signal's stability
    if numel(backgroundVector) >= (j+1)*k_max+100
        a_t = backgroundVector(1+(j*k_max):(j+1)*k_max+100);    %a_t is the time series being analyzed; add 1 to the indices to account for the fact range (i) starts at zero
    else
        m{j+1} = [];    %remove extra cell preallocated for, but not used
        M(j+1,:) = [];
        skip = 1;   %if the last window was skipped because it was too short to be analyzed with the preset k_max, keep track of it in the program for plotting later
        continue %don't calculate the last window if there are not enough data points
    end
    m{j+1}=WP_MultipleRegression(a_t', k_max);  %Calculate M | Store Struct output
    M(j+1,1) = m{j+1}.branching_ratio;  %"m value" 
    M(j+1,2) = m{j+1}.naive_branching_ratio;    %"conventional m value" 
    M(j+1,3) = m{j+1}.autocorrelationtime;  %Store values into a matrix for plotting
end

%Classification labels for plotting
[label, classification] = decipher (events,i);

%Make Time Vector for the m-Calculation values
startBackground = (events(i,1)-contextDuration)*frequency;
endBackground = (events(i,2)+contextDuration)*frequency;
index_mCalc = int64(startBackground:k_max:endBackground);   %k_max is window size
if skip == 1    %if the last window was skipped, remove the index for the last window for plotting purposes
    index_mCalc(end) = [];
    skip = 0;   %index has been removed, so turn off skip.
end

if i~=1 %if not the first iteration (very first even in the recording)
    while numel(index_mCalc) > numel(M(:,1))   %remove all the index_mCalc indices at the end that were extra (for padding)
    index_mCalc(end) = [];
    end
else   %if it is the first iteration
    while numel(index_mCalc) > numel(M(:,1))    %remove all the index_mCalc indices in the beginning that are extra (padding)
    index_mCalc(1) = [];
    end    
end

%Plot Results
figHandle = figure;
set(gcf,'NumberTitle','off', 'color', 'w'); %don't show the figure number
set(gcf,'Name','Overview of Data: m calculation by Wilting and Priesemann, 2018'); %select the name you want
set(gcf, 'Position', get(0, 'Screensize'));
figHandle = plotEvent(figHandle, LFP_filtered, t, events(i,:), [], LED, contextDuration, frequency);
hold on
ylabel ('LFP (mV)');
xlabel ('Time (s)');

yyaxis right

plot (t(index_mCalc), M(:,1), 'o', 'color', 'k', 'MarkerFaceColor', 'g') %Plot m value allocated with each window (at the beginning of the window)
plot (t(index_mCalc), M(:,1), 'o', 'color', 'k') %Place holder in Legend for Classification Labels

title (sprintf('Overview of m Calculation for event #%d: %s @ %.1f sec', i, label, events(i,1)));
ylabel ('m (Branching Ratio)');
% xlabel ('Time (s)');
legend ('LFP filtered', 'Epileptiform Event', 'Detected Onset', 'Detected Offset', 'Applied Stimulus', 'm (Branching Ratio)',  sprintf('Classification: %s', classification))
legend ('Location', 'northeastoutside')
axis tight

set(gca,'fontsize',14)

 %Export figures to .pptx
 exportToPPTX('addslide'); %Draw seizure figure on new powerpoint slide
 exportToPPTX('addpicture',figHandle);
 close(figHandle)

end

%save and close the .PPTX
excelFileName = FileName(1:8);
subtitle = '(mCalculation)';
exportToPPTX('saveandclose',sprintf('%s%s', excelFileName, subtitle));